package com.safecharge.retail.request;

import java.util.HashMap;
import java.util.Map;

import javax.validation.ConstraintViolationException;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import com.safecharge.retail.model.UserDetails;
import com.safecharge.retail.request.builder.SafechargeBuilder;
import com.safecharge.retail.util.Constants;
import com.safecharge.retail.util.ValidChecksum;
import com.safecharge.retail.util.ValidationUtil;

/**
 * Copyright (C) 2007-2017 SafeCharge International Group Limited.
 *
 * @author <a mailto:nikolad@safecharge.com>Nikola Dichev</a>
 * @since 3/21/2017
 */
@ValidChecksum(orderMappingName = Constants.ChecksumOrderMapping.ADD_CASHIER_APM) public class AddUPOAPMRequest extends SafechargeRequest {

    /**
     * The unique name of the payment method in Cashier system (for example apmgw_Neteller).  For a list of possible values, see APM Unique SafeCharge Cashier Names.
     */
    @NotNull(message = "paymentMethodName parameter is mandatory!") private String paymentMethodName;

    /**
     * A list of name-value pairs that contain the parameters of the user payment option.
     */
    @NotNull(message = "apmData parameter is mandatory!") @Size(min = 1,
                                                                message = "apmData must have at least one entry") private Map<String, String> apmData;

    /**
     * This parameter is a unique identifier for each customer generated by you.
     */
    @NotNull(message = "userTokenId parameter is mandatory!") private String userTokenId;

    /**
     * Billing address related to a user payment option. Since order can contain only one payment option billing address is part of the order parameters.
     */
    private UserDetails billingAddress;

    public static Builder builder() {
        return new Builder();
    }

    public String getPaymentMethodName() {
        return paymentMethodName;
    }

    public void setPaymentMethodName(String paymentMethodName) {
        this.paymentMethodName = paymentMethodName;
    }

    public Map<String, String> getApmData() {
        return apmData;
    }

    public void setApmData(Map<String, String> apmData) {
        this.apmData = apmData;
    }

    public String getUserTokenId() {
        return userTokenId;
    }

    public void setUserTokenId(String userTokenId) {
        this.userTokenId = userTokenId;
    }

    public UserDetails getBillingAddress() {
        return billingAddress;
    }

    public void setBillingAddress(UserDetails billingAddress) {
        this.billingAddress = billingAddress;
    }

    @Override public String toString() {
        final StringBuilder sb = new StringBuilder("AddUPOAPM{");
        sb.append("billingAddress=")
          .append(billingAddress);
        sb.append(", paymentMethodName='")
          .append(paymentMethodName)
          .append('\'');
        sb.append(", apmData=")
          .append(apmData);
        sb.append(", userTokenId='")
          .append(userTokenId)
          .append('\'');
        sb.append(", ")
          .append(super.toString());
        sb.append('}');
        return sb.toString();
    }

    public static class Builder extends SafechargeBuilder<Builder> {

        UserDetails billingAddress;
        private String paymentMethodName;
        private Map<String, String> apmData;
        @NotNull private String userTokenId;

        public Builder addPaymentMethodName(String paymentMethodName) {
            this.paymentMethodName = paymentMethodName;
            return this;
        }

        public Builder addUserTokenId(String userTokenId) {
            this.userTokenId = userTokenId;
            return this;
        }

        public Builder addApmData(Map<String, String> apmData) {
            this.apmData = apmData;
            return this;
        }

        public Builder addApmDataEntry(String key, String value) {
            if (apmData == null) {
                apmData = new HashMap<>();
            }
            apmData.put(key, value);
            return this;
        }

        public Builder addBillingAddress(UserDetails billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        public Builder addBillingAddress(String firstName, String lastName, String address, String phone, String zip, String city, String countryCode,
                String state, String email, String locale, String birthdate) {
            UserDetails billingAddress = new UserDetails();
            billingAddress.setFirstName(firstName);
            billingAddress.setLastName(lastName);
            billingAddress.setAddress(address);
            billingAddress.setPhone(phone);
            billingAddress.setZip(zip);
            billingAddress.setCity(city);
            billingAddress.setCountryCode(countryCode);
            billingAddress.setState(state);
            billingAddress.setEmail(email);
            billingAddress.setLocale(locale);
            billingAddress.setBirthdate(birthdate);
            return addBillingAddress(billingAddress);
        }

        @Override public SafechargeRequest build() throws ConstraintViolationException {
            AddUPOAPMRequest addUPOAPM = new AddUPOAPMRequest();
            addUPOAPM.setPaymentMethodName(paymentMethodName);
            addUPOAPM.setUserTokenId(userTokenId);
            addUPOAPM.setApmData(apmData);
            addUPOAPM.setBillingAddress(billingAddress);
            return ValidationUtil.validate(super.build(addUPOAPM));
        }
    }
}
